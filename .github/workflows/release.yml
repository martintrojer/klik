name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Verify package builds
      run: cargo build --release --verbose

    - name: Run tests before publish
      run: cargo test --release --verbose

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_API_TOKEN }}

  build-binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: thokr
            asset_name: thokr-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: thokr
            asset_name: thokr-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: thokr.exe
            asset_name: thokr-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: thokr
            asset_name: thokr-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: thokr
            asset_name: thokr-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose

    - name: Strip binary (Unix only)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream