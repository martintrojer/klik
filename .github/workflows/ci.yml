name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by only testing stable on Windows/macOS
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check code compiles
      run: cargo check --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --all-features --verbose

  format:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # minimal-versions:
  #   name: Minimal Versions
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@nightly
  #
  #   - name: Configure Rust cache
  #     uses: Swatinem/rust-cache@v2
  #
  #   - name: Install cargo-minimal-versions
  #     run: cargo install cargo-minimal-versions
  #
  #   - name: Check with minimal versions
  #     run: cargo minimal-versions check
  #
  # msrv:
  #   name: Minimum Supported Rust Version
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Install Rust 1.70.0 (MSRV)
  #     uses: dtolnay/rust-toolchain@stable
  #     with:
  #       toolchain: 1.70.0
  #
  #   - name: Configure Rust cache
  #     uses: Swatinem/rust-cache@v2
  #
  #   - name: Check MSRV compatibility
  #     run: cargo check --verbose
